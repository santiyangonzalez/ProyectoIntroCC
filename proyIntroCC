<!DOCTYPE html>
<!-- This is based on DillingerLee's great template here:
https://github.com/Team-Code/KA_Offline -->
<html> 
 <head>
    <title>Processing.JS inside Webpages: Template</title> 
</head>
 <body>
    <p align="center"> 
	<!--This draws the Canvas on the webpage -->
      <canvas id="mycanvas"></canvas> 
    </p>
 </body>
 
 <!-- Run all the JavaScript stuff -->
 <!-- Include the processing.js library -->
 <!-- See https://khanacademy.zendesk.com/hc/en-us/articles/202260404-What-parts-of-ProcessingJS-does-Khan-Academy-support- for differences -->
 <script src="https://cdn.jsdelivr.net/processing.js/1.4.8/processing.min.js"></script> 
 
 <script>
    var sketchProc = function(processingInstance) {
     with (processingInstance) {
        size(600, 400); 
        frameRate(70);
        
        // JSProcessing
var parameters = ['Grosor','Rojo','Verde','Azul'];
var globalTranslation = [200,200];
//button object
var btn = function(Xpos,Ypos,purpose){
    this.Xpos = Xpos;
    this.Ypos = Ypos;
    this.purpose = purpose;
};
//show buttons
btn.prototype.display = function(){
    pushMatrix();
    translate(this.Xpos,this.Ypos);
    fill(0, 255, 213);
    strokeWeight(1);
    rect(-2,0,18,17,5);
    if (this.purpose === 'up'){ fill(255, 0, 0); triangle(0,15,15/2,0,15,15);} 
    else if (this.purpose === 'down'){ fill(200,200,200); triangle(0,0,15/2,15,15,0);}
    popMatrix();
};
//true when mouse is clicked inside button
/*
btn.prototype.mouseIn = function() {
    //account for global translation!!!
    return mouseX > this.Xpos+globalTranslation[0] && mouseX < this.Xpos+15+globalTranslation[0] && mouseY >  this.Ypos+globalTranslation[1] && mouseY < this.Ypos + 15+globalTranslation[1];

};
*/

var Node = function(pos1,pos2,width,a,b,r,g,bl){
    this.pos1 = pos1.get();
    this.pos2 = pos2.get();
    this.z1 = 0;
    this.z2 = 0;
    this.width = width;
    this.a = a;
    this.b = b;
    this.r = r;
    this.g = g;
    this.bl = bl;
};
Node.prototype.display = function(){
    strokeWeight(this.width);
    stroke(this.r, this.g, this.bl);
    line(this.pos1.x,this.pos1.y,this.pos2.x,this.pos2.y);
};
Node.prototype.rotateY3D = function(theta){
    //(rotation) with repect to y axis
    //grab coordinates (with respect to rotation origin)
    var x1 = this.pos1.x-this.a; var z1 = this.z1;
    var x2 = this.pos2.x-this.a; var z2 = this.z2;
    //apply axis of rotation
    var x1º = x1*cos(theta)-z1*sin(theta)+this.a;
    this.z1 = z1*cos(theta)+x1*sin(theta);
    var x2º = x2*cos(theta)-z2*sin(theta)+this.a;
    this.z2 = z2*cos(theta)+x2*sin(theta);
    this.pos1.x = x1º;
    this.pos2.x = x2º;
};
Node.prototype.rotateX3D = function(alpha){
    var y1 = this.pos1.y-this.b; var z1 = this.z1;
    var y2 = this.pos2.y-this.b; var z2 = this.z2;
    var y1º = y1*cos(alpha)-z1*sin(alpha);
    this.z1 = z1*cos(alpha)+y1*sin(alpha);
    var y2º = y2*cos(alpha)-z2*sin(alpha);
    this.z2 = z2*cos(alpha)+y2*sin(alpha);
    this.pos1.y = y1º+this.b;
    this.pos2.y = y2º+this.b;
};
Node.prototype.rotateZ3D = function(gamma){
    var y1 = this.pos1.y-this.b; var x1 = this.pos1.x-this.a;
    var y2 = this.pos2.y-this.b; var x2 = this.pos2.x-this.a;
    
    var y1º = y1*cos(gamma)-x1*sin(gamma)+this.b;
    var x1º = x1*cos(gamma)+y1*sin(gamma)+this.a;
    
    var y2º = y2*cos(gamma)-x2*sin(gamma)+this.b;
    var x2º = x2*cos(gamma)+y2*sin(gamma)+this.a;
    this.pos1.x = x1º;
    this.pos2.x = x2º;
    this.pos1.y = y1º;
    this.pos2.y = y2º;
};
//collection of nodes
var Rule = function(){
    this.nodes = [];
    this.width = 10;
    this.r = 10;
    this.g = 10;
    this.bl = 100;
    this.values = [this.width,this.r,this.g,this.bl];
};

Rule.prototype.changeParameters = function(){
     var upBtns = []; var downBtns = [];
    
fill(111, 0, 255);
textSize(12);
for (var i = 0; i < parameters.length; i++){
    var Ypos = (i*20) -190;
    var Xpos = 288;
    var num = i+1;
    var keyz = ['(Q)','(W)','(E)','(R)']; 
   	text('('+num+')'+' '+parameters[i]+' '+ keyz[i],Xpos-10,Ypos,152,30);
    for ( var r = 0; r < 4; r++){
        var btnY = 10+r*20-200;
        upBtns.push( new btn(Xpos-30,btnY,'up'));
        downBtns.push( new btn (Xpos+70, btnY, 'down'));
        
    }
}
    for (var j in upBtns){
        upBtns[j].display();
        downBtns[j].display();
    }
    
    
    
};

Rule.prototype.changeWithKeys = function(i,d){
    //increase with 1,2,3,4, decrease with q,w,e,r
    if (this.values[i] < 255){
        this.values[i]+= d;
    }
    
};


Rule.prototype.addNodes = function(){
    var x = 0; var y = 0;
    if (this.nodes.length > 0){
        var firstNode = this.nodes[0];
        var center = firstNode.pos1.get();
        x = center.x;  y = center.y;
    }
    this.nodes.push(new Node(new PVector(pmouseX-200,pmouseY-200),new PVector(mouseX-200,mouseY-200),this.values[0],x,y,this.values[1],this.values[2],this.values[3]));
};
Rule.prototype.display = function(){
    for (var k = 1; k < this.nodes.length; k++){
        this.nodes[k].display();
    }
    fill(115, 255, 0);
    for(var i =0; i < 4; i++){
        text(this.values[i],375,i*20-186,40,40);
    }
};
Rule.prototype.rotateY3D = function(a){
    for (var k = 0; k < this.nodes.length; k++){
        this.nodes[k].rotateY3D(a);
    }
};
Rule.prototype.rotateX3D = function(a){
    for (var k = 0; k < this.nodes.length; k++){
        this.nodes[k].rotateX3D(a);
    }
};  
Rule.prototype.rotateZ3D = function(a){
    for (var k = 0; k < this.nodes.length; k++){
        this.nodes[k].rotateZ3D(a);
    }
};
Rule.prototype.erase = function(){
    this.nodes.splice(this.nodes.length-10,10);
};
var rule = new Rule();
var paint = false;

//handle rotation with keys (arrows, A and D)
keyPressed = function(){
        
    var a = .1;
    var keyz1 = [49,50,51,52];
    var keyz2 = [81,87,69,82];
       if ( keyCode === UP){
           rule.rotateX3D(-a);
       } else if (keyCode === DOWN){
            rule.rotateX3D(a);
       } else if( keyCode === RIGHT){
            rule.rotateY3D(a);
       }else if(keyCode === LEFT){
            rule.rotateY3D(-a);
       } else if (keyCode === 65){
           rule.rotateZ3D(-a);
       } else if (keyCode === 68){
           rule.rotateZ3D(a);
       }
       if(keyCode === 81){
               rule.changeWithKeys(0,-1);
           }
       for(var i = 0; i < 4; i++){
           if(keyCode === keyz1[i]){
               //increase parameters
               rule.changeWithKeys(i,1);
           } else if(keyCode === keyz2[i]){
               //decrease parameters
               rule.changeWithKeys(i,-1);
            }
       
       }
       
       
       //press Z to draw
       if( keyCode === 32){
            paint = true;
       } //press e to erase
       if( keyCode === 8){
           rule.erase();
       }
       
};
keyReleased = function(){
    if(keyCode === 32){
        paint = false;
    }

};
mouseMoved = function(){
    if (paint === true){
        rule.addNodes();
    }                     
};
draw = function() {
    background(19, 20, 20);
    pushMatrix();
    translate(globalTranslation[0],globalTranslation[1]);
    rule.display();
    rule.changeParameters();
    popMatrix();
    
};
    }};

    // Get the canvas that Processing-js will use
    var canvas = document.getElementById("mycanvas"); 
    // Pass the function sketchProc (defined in myCode.js) to Processing's constructor.
    var processingInstance = new Processing(canvas, sketchProc); 
 </script>

</html>
